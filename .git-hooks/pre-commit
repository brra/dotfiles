#!/usr/bin/env sh

set -e

ends_with_newline() {
    if [ -z "$(tail -c1 "${1}")" ]; then
        return 0
    else
        return 1
    fi
}

exit_on_error() {
    EXIT_CODE=$1
    # shellcheck disable=SC2086
    if [ $EXIT_CODE -ne 0 ]; then
        echo "Exit code: $EXIT_CODE"
        exit $EXIT_CODE
    fi
}

is_binary() {
    p=$(printf '%s\t-\t' -)
    t=$(git diff --no-index --numstat /dev/null "$1")
    case "$t" in "$p"*) return 0 ;; esac
    return 1
}

is_supported_shell_script() {
    grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh|mksh)' "${1}"
    CHECK_RETURN_CODE=$?
    return $CHECK_RETURN_CODE
}

execute_command() {
    check_name="$1"
    command_name="$2"
    message_prefix="$3"
    intro_message="$4"
    check_name_output="$5"
    include_file_condition=$6

    EXIT_CODE=0

    if command -v "$command_name" >/dev/null 2>&1; then
        echo "$message_prefix: $intro_message"

        for CHANGED_FILE in $CHANGED_FILES; do
            if ! [ -e "$CHANGED_FILE" ]; then
                echo "$message_prefix: skipping $check_name_output for $CHANGED_FILE because it was deleted"
                continue
            fi

            if is_binary "$CHANGED_FILE"; then
                echo "$message_prefix: skipping $check_name_output for $CHANGED_FILE because it's a binary"
                continue
            fi

            # If there's a condition to check use it
            if [ -n "$include_file_condition" ]; then
                # Skip this file if it doesn't pass the include condition
                if ! $include_file_condition "$CHANGED_FILE"; then
                    continue
                fi
            fi

            if $check_name "$CHANGED_FILE"; then
                echo "$message_prefix: $check_name_output on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=1
                echo "$message_prefix: $check_name_output on $CHANGED_FILE FAILED"
                exit_on_error $EXIT_CODE
            fi
        done
    else
        echo "$message_prefix: WARNING, $command_name is not available!"
    fi

    unset message_prefix
    unset intro_message
    unset check_name

    exit_on_error $EXIT_CODE
}

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    AGAINST=HEAD
else
    # Get the hash of the empty-tree commit
    AGAINST="$(git hash-object -t tree --stdin </dev/null)"
fi

CHANGED_FILES="$(git diff-index --cached --name-only "$AGAINST")"

EXIT_CODE=0

echo "pre-commit: Looking for whitespace errors"
if ! git diff-index --check --cached "$AGAINST"; then
    EXIT_CODE=$?
    echo "pre-commit: whitespace errors check FAILED"
    exit_on_error $EXIT_CODE
else
    echo "pre-commit: whitespace errors check PASSED"
fi

exit_on_error $EXIT_CODE

execute_command ends_with_newline "tail" "pre-commit" "Checking if text files have a newline at the end..." "newline check"
execute_command shellcheck "shellcheck" "pre-commit" "Running shellcheck..." "shellcheck" is_supported_shell_script
execute_command "shfmt -d" "shfmt" "pre-commit" "Running shfmt..." "shfmt" is_supported_shell_script

if command -v terraform >/dev/null 2>&1; then
    echo "pre-commit: Running terraform format check..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if [ -f "$CHANGED_FILE" ] && case "$CHANGED_FILE" in *.tf) ;; *.tfvars) ;; *) false ;; esac; then
            if ! [ -e "$CHANGED_FILE" ]; then
                echo "pre-commit: skipping terraform fmt for $CHANGED_FILE because it was deleted"
                continue
            fi

            if terraform fmt -check "$CHANGED_FILE"; then
                echo "pre-commit: terraform fmt on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: terraform fmt on $CHANGED_FILE FAILED. $CHANGED_FILE needs to be formatted"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, terraform is not installed!"
fi

exit_on_error $EXIT_CODE

if command -v markdownlint >/dev/null 2>&1; then
    echo "pre-commit: Running markdownlint..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if ! [ -e "$CHANGED_FILE" ]; then
            echo "pre-commit: skipping markdownlint for $CHANGED_FILE because it was deleted"
            continue
        fi

        if [ -f "$CHANGED_FILE" ] && case "$CHANGED_FILE" in *.md) ;; *) false ;; esac; then
            if markdownlint "$CHANGED_FILE"; then
                echo "pre-commit: markdownlint on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: markdownlint on $CHANGED_FILE FAILED"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, markdownlint is not installed!"
fi

exit_on_error $EXIT_CODE

if command -v yamllint >/dev/null 2>&1; then
    echo "pre-commit: Running yamllint..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if ! [ -e "$CHANGED_FILE" ]; then
            echo "pre-commit: skipping yamllint for $CHANGED_FILE because it was deleted"
            continue
        fi

        if [ -f "$CHANGED_FILE" ] && case "$CHANGED_FILE" in *.yml) ;; *.yaml) ;; *) false ;; esac; then
            if yamllint --strict "$CHANGED_FILE"; then
                echo "pre-commit: yamllint on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: yamllint on $CHANGED_FILE FAILED"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, yamllint is not installed!"
fi

exit_on_error $EXIT_CODE

unset line
unset EXIT_CODE
unset CHANGED_FILE
unset CHANGED_FILES
unset AGAINST

set +e
