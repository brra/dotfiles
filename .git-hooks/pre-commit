#!/usr/bin/env sh

exit_on_error() {
    EXIT_CODE=$1
    # shellcheck disable=SC2086
    if [ $EXIT_CODE -ne 0 ]; then
        echo "Exit code: $EXIT_CODE"
        exit $EXIT_CODE
    fi
}

is_binary() {
    p=$(printf '%s\t-\t' -)
    t=$(git diff --no-index --numstat /dev/null "$1")
    case "$t" in "$p"*) return 0 ;; esac
    return 1
}

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    AGAINST=HEAD
else
    # Get the hash of the empty-tree commit
    AGAINST="$(git hash-object -t tree --stdin </dev/null)"
fi

CHANGED_FILES="$(git diff-index --cached --name-only "$AGAINST")"

EXIT_CODE=0

echo "pre-commit: Looking for whitespace errors"
if ! git diff-index --check --cached "$AGAINST"; then
    EXIT_CODE=$?
    echo "pre-commit: whitespace errors check FAILED"
    exit_on_error $EXIT_CODE
else
    echo "pre-commit: whitespace errors check PASSED"
fi

exit_on_error $EXIT_CODE

if command -v tail >/dev/null 2>&1; then
    echo "pre-commit: Checking if text files have a newline at the end..."

    for CHANGED_FILE in $CHANGED_FILES; do
        if ! [ -e "$CHANGED_FILE" ]; then
            echo "pre-commit: skipping newline check for $CHANGED_FILE because it was deleted"
            continue
        fi

        if is_binary "$CHANGED_FILE"; then
            echo "pre-commit: skipping newline check for $CHANGED_FILE because it's a binary"
            continue
        fi

        if [ -z "$(tail -c1 "$CHANGED_FILE")" ]; then
            echo "pre-commit: $CHANGED_FILE newline at the end check PASSED"
        else
            EXIT_CODE=1
            echo "pre-commit: $CHANGED_FILE newline at the end check FAILED"
            exit_on_error $EXIT_CODE
        fi
    done
else
    echo "pre-commit: WARNING, tail is not installed!"
fi

exit_on_error $EXIT_CODE

if command -v shellcheck >/dev/null 2>&1; then
    echo "pre-commit: Running shellcheck..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if ! [ -e "$CHANGED_FILE" ]; then
            echo "pre-commit: skipping shellcheck for $CHANGED_FILE because it was deleted"
            continue
        fi

        if [ -f "$CHANGED_FILE" ] && grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh)' "$CHANGED_FILE"; then
            if shellcheck "$CHANGED_FILE"; then
                echo "pre-commit: shellcheck on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: shellcheck on $CHANGED_FILE FAILED"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, shellcheck is not installed!"
fi

exit_on_error $EXIT_CODE

if command -v shfmt >/dev/null 2>&1; then
    echo "pre-commit: Running shfmt..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if ! [ -e "$CHANGED_FILE" ]; then
            echo "pre-commit: skipping shfmt for $CHANGED_FILE because it was deleted"
            continue
        fi

        if [ -f "$CHANGED_FILE" ] && grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh)' "$CHANGED_FILE"; then
            if shfmt -d "$CHANGED_FILE"; then
                echo "pre-commit: shfmt on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: shfmt on $CHANGED_FILE FAILED"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, shfmt is not installed!"
fi

if command -v terraform >/dev/null 2>&1; then
    echo "pre-commit: Running terraform format check..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if [ -f "$CHANGED_FILE" ] && [ -z "${CHANGED_FILE##*".tf"*}" ]; then
            if ! [ -e "$CHANGED_FILE" ]; then
                echo "pre-commit: skipping terraform fmt for $CHANGED_FILE because it was deleted"
                continue
            fi

            if terraform fmt -check "$CHANGED_FILE"; then
                echo "pre-commit: terraform fmt on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: terraform fmt on $CHANGED_FILE FAILED. $CHANGED_FILE needs to be formatted"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, terraform is not installed!"
fi

exit_on_error $EXIT_CODE

if command -v markdownlint >/dev/null 2>&1; then
    echo "pre-commit: Running markdownlint..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if ! [ -e "$CHANGED_FILE" ]; then
            echo "pre-commit: skipping markdownlint for $CHANGED_FILE because it was deleted"
            continue
        fi

        if [ -f "$CHANGED_FILE" ] && case "$CHANGED_FILE" in *.md) ;; *) false ;; esac then
            if markdownlint "$CHANGED_FILE"; then
                echo "pre-commit: markdownlint on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: markdownlint on $CHANGED_FILE FAILED"
                exit_on_error $EXIT_CODE
            fi
        fi
    done
else
    echo "pre-commit: WARNING, markdownlint is not installed!"
fi

exit_on_error $EXIT_CODE

unset line
unset EXIT_CODE
unset CHANGED_FILE
unset CHANGED_FILES
unset AGAINST
