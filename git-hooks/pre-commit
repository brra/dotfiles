#!/usr/bin/env sh

exit_on_error() {
    EXIT_CODE=$1
    # shellcheck disable=SC2086
    if [ $EXIT_CODE -ne 0 ]; then
        echo "Exit code: $EXIT_CODE"
        exit $EXIT_CODE
    fi
}

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    AGAINST=HEAD
else
    # Get the hash of the empty-tree commit
    AGAINST="$(git hash-object -t tree --stdin </dev/null)"
fi

CHANGED_FILES="$(git diff-index --cached --name-only "$AGAINST")"

EXIT_CODE=0

echo "pre-commit: Looking for whitespace errors"
if ! git diff-index --check --cached "$AGAINST"; then
    EXIT_CODE=$?
    echo "pre-commit: Aborting commit due to whitespace errors"
else
    echo "pre-commit: No whitespace errors"
fi

exit_on_error $EXIT_CODE

if command -v shellcheck >/dev/null 2>&1; then
    echo "pre-commit: Running shellcheck..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if [ -f "$CHANGED_FILE" ] && grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh)' "$CHANGED_FILE"; then
            if shellcheck "$CHANGED_FILE"; then
                echo "pre-commit: shellcheck on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: shellcheck on $CHANGED_FILE FAILED"
            fi
        fi
    done
else
    echo "pre-commit: WARNING, shellcheck is not installed!"
fi

exit_on_error $EXIT_CODE

if command -v shfmt >/dev/null 2>&1; then
    echo "pre-commit: Running shfmt..."
    for CHANGED_FILE in $CHANGED_FILES; do
        if [ -f "$CHANGED_FILE" ] && grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh)' "$CHANGED_FILE"; then
            if shfmt -d "$CHANGED_FILE"; then
                echo "pre-commit: shfmt on $CHANGED_FILE PASSED"
            else
                EXIT_CODE=$?
                echo "pre-commit: shfmt on $CHANGED_FILE FAILED"
            fi
        fi
    done
else
    echo "pre-commit: WARNING, shfmt is not installed!"
fi

exit_on_error $EXIT_CODE

unset line
unset EXIT_CODE
unset CHANGED_FILE
unset CHANGED_FILES
unset AGAINST
