#!/bin/bash
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=ferrarimarco

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

#
# Container Aliases
#

ansible(){
	del_stopped ansible

	docker run \
  --rm \
  -it \
  --net=host \
	-v /etc/localtime:/etc/localtime:ro \
  -v "$(pwd)":/etc/ansible \
  -v "${HOME}"/.ssh:/root/.ssh:ro \
	--name ansible \
  ${DOCKER_REPO_PREFIX}/open-development-environment-ansible "$@"
}

atom(){
	del_stopped atom

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}:/root/host_home" \
		-v "${HOME}/.atom/config.cson:/root/.atom/config.cson" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e "QT_X11_NO_MITSHM=1" \
		--device /dev/dri \
		--name atom \
		${DOCKER_REPO_PREFIX}/atom
}

bmon(){
	del_stopped bmon

	docker run -it --rm \
		--net=host \
		--name bmon \
		${DOCKER_REPO_PREFIX}/bmon
}

changelog-generator(){
	del_stopped changelog-generator

	docker run -it --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v "$(pwd)":/usr/local/src/your-app \
		--name changelog-generator \
		${DOCKER_REPO_PREFIX}/github-changelog-generator:1.14.3 "$@"
}

cookiecutter(){
	del_stopped cookiecutter

	docker run -it --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-u "$(id -u)":"$(id -g)" \
		-v "$(pwd)":/usr/src/app \
		--name cookiecutter \
		${DOCKER_REPO_PREFIX}/cookiecutter "$@"
}

docker-clean(){
	del_stopped docker-clean

	docker run --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--name docker-clean \
		zzrot/docker-clean "$@"
}

dockerfile-lint(){
	del_stopped hadolint
	del_stopped dockerlint

	echo "Linting Dockerfiles from $(pwd)";
	find . -type f -iname "Dockerfile" | while read -r line; do
		echo "Linting $line";
		docker run -v "$(pwd)":/mnt --rm -w="/mnt" --name hadolint hadolint/hadolint hadolint "$line";
		docker run -v "$(pwd)":/mnt --rm -w="/mnt" --name dockerlint redcoolbeans/dockerlint "$line";
	done
}

jq(){
	del_stopped jq

	docker run \
		--rm \
		-i \
		--name jq \
		stedolan/jq "$@"
}

inspec(){
	del_stopped inspec

	docker run \
	--rm \
	-it \
	--net=host \
	-v /etc/localtime:/etc/localtime:ro \
	-v "$(pwd)":/share \
	-v "${HOME}"/.ssh:/root/.ssh:ro \
	--name inspec \
	chef/inspec "$@"
}

liquibase(){
	del_stopped liquibase
	docker run --rm \
		-v /etc/localtime:/etc/localtime:ro \
		--name liquibase \
		${DOCKER_REPO_PREFIX}/liquibase "$@"
}

maven(){
	del_stopped maven
	docker run --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/.m2:/var/maven/.m2" \
		--name changelog-generator \
		-ti --rm -u "$(id -u)":"$(id -g)" \
		-e MAVEN_CONFIG=/var/maven/.m2 \
		maven:3.5.4-jdk-8-alpine \
		mvn -Duser.home=/var/maven "$@"
}

nethogs(){
	del_stopped nethogs

	docker run -it --rm \
		--net=host \
		--name nethogs \
		${DOCKER_REPO_PREFIX}/nethogs
}

psscriptanalyzer(){
	del_stopped psscriptanalyzer

	docker run -it --rm \
		--name psscriptanalyzer \
		-v $(pwd):/usr/src:ro \
		mcr.microsoft.com/powershell \
		pwsh -command "Save-Module -Name PSScriptAnalyzer -Path .; Import-Module .\PSScriptAnalyzer; Invoke-ScriptAnalyzer -EnableExit -Path /usr/src -Recurse"

}

shellcheck(){
	del_stopped shellcheck

	docker run --rm -it \
		--name shellcheck \
		-v "$(pwd)":/usr/src:ro \
		${DOCKER_REPO_PREFIX}/shellcheck
}
